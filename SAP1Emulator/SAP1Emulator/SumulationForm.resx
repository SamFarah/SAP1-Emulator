<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>0: LDA 14 ; 0x1E
1: SUB 12 ; 0x3C
2: JC  6  ; 0x76
3: LDA 13 ; 0x1D
4: OUT    ; 0xE0
5: HLT    ; 0xF0
6: STA 14 ; 0x4E
7: LDA 13 ; 0x1D
8: ADD 15 ; 0x2F
9: STA 13 ; 0x4D
A: JMP 0  ; 0x60

Multiply value in memory 0x0E by value in memory 0x0F. Value at 0x0D should be initialized to 0.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="textBox4.Text" xml:space="preserve">
    <value>.CODE
Start:	LDA Op1		; Load value of Op1 into A
	SUB i		; subtract value of i from A
	JC  Cont	; jump to Cont if carry
	LDA Res		; Load value of Res in A
	OUT		; Output result
	HLT		; Hault Computer
Cont:	STA Op1		; Store value of A in Op1
	LDA Res		; Load value of Res in A
	ADD Op2		; Add value of Op2 into A
	STA Res		; Sore value of A in Res
	JMP Start	; Jump to Start


.DATA
	i   $01		; Decrement variable
	Op1 $03		; First operand variable
	Op2 $05		; Second operand variable
	Res $00		; Result variable</value>
  </data>
</root>